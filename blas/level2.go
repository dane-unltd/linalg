package blas

var Sgemv func(o Order, tA Transpose, m int, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
var Sgbmv func(o Order, tA Transpose, m int, n int, kL int, kU int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
var Strmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, a []float32, lda int, x []float32, incX int)
var Stbmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, k int, a []float32, lda int, x []float32, incX int)
var Stpmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, ap []float32, x []float32, incX int)
var Strsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, a []float32, lda int, x []float32, incX int)
var Stbsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, k int, a []float32, lda int, x []float32, incX int)
var Stpsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, ap []float32, x []float32, incX int)
var Dgemv func(o Order, tA Transpose, m int, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
var Dgbmv func(o Order, tA Transpose, m int, n int, kL int, kU int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
var Dtrmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, a []float64, lda int, x []float64, incX int)
var Dtbmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, k int, a []float64, lda int, x []float64, incX int)
var Dtpmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, ap []float64, x []float64, incX int)
var Dtrsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, a []float64, lda int, x []float64, incX int)
var Dtbsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, k int, a []float64, lda int, x []float64, incX int)
var Dtpsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, ap []float64, x []float64, incX int)
var Cgemv func(o Order, tA Transpose, m int, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
var Cgbmv func(o Order, tA Transpose, m int, n int, kL int, kU int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
var Ctrmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, a []complex64, lda int, x []complex64, incX int)
var Ctbmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, k int, a []complex64, lda int, x []complex64, incX int)
var Ctpmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, ap []complex64, x []complex64, incX int)
var Ctrsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, a []complex64, lda int, x []complex64, incX int)
var Ctbsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, k int, a []complex64, lda int, x []complex64, incX int)
var Ctpsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, ap []complex64, x []complex64, incX int)
var Zgemv func(o Order, tA Transpose, m int, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
var Zgbmv func(o Order, tA Transpose, m int, n int, kL int, kU int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
var Ztrmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, a []complex128, lda int, x []complex128, incX int)
var Ztbmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, k int, a []complex128, lda int, x []complex128, incX int)
var Ztpmv func(o Order, ul Uplo, tA Transpose, d Diag, n int, ap []complex128, x []complex128, incX int)
var Ztrsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, a []complex128, lda int, x []complex128, incX int)
var Ztbsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, k int, a []complex128, lda int, x []complex128, incX int)
var Ztpsv func(o Order, ul Uplo, tA Transpose, d Diag, n int, ap []complex128, x []complex128, incX int)
var Ssymv func(o Order, ul Uplo, n int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
var Ssbmv func(o Order, ul Uplo, n int, k int, alpha float32, a []float32, lda int, x []float32, incX int, beta float32, y []float32, incY int)
var Sspmv func(o Order, ul Uplo, n int, alpha float32, ap []float32, x []float32, incX int, beta float32, y []float32, incY int)
var Sger func(o Order, m int, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int)
var Ssyr func(o Order, ul Uplo, n int, alpha float32, x []float32, incX int, a []float32, lda int)
var Sspr func(o Order, ul Uplo, n int, alpha float32, x []float32, incX int, ap []float32)
var Ssyr2 func(o Order, ul Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32, lda int)
var Sspr2 func(o Order, ul Uplo, n int, alpha float32, x []float32, incX int, y []float32, incY int, a []float32)
var Dsymv func(o Order, ul Uplo, n int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
var Dsbmv func(o Order, ul Uplo, n int, k int, alpha float64, a []float64, lda int, x []float64, incX int, beta float64, y []float64, incY int)
var Dspmv func(o Order, ul Uplo, n int, alpha float64, ap []float64, x []float64, incX int, beta float64, y []float64, incY int)
var Dger func(o Order, m int, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int)
var Dsyr func(o Order, ul Uplo, n int, alpha float64, x []float64, incX int, a []float64, lda int)
var Dspr func(o Order, ul Uplo, n int, alpha float64, x []float64, incX int, ap []float64)
var Dsyr2 func(o Order, ul Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64, lda int)
var Dspr2 func(o Order, ul Uplo, n int, alpha float64, x []float64, incX int, y []float64, incY int, a []float64)
var Chemv func(o Order, ul Uplo, n int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
var Chbmv func(o Order, ul Uplo, n int, k int, alpha complex64, a []complex64, lda int, x []complex64, incX int, beta complex64, y []complex64, incY int)
var Chpmv func(o Order, ul Uplo, n int, alpha complex64, ap []complex64, x []complex64, incX int, beta complex64, y []complex64, incY int)
var Cgeru func(o Order, m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
var Cgerc func(o Order, m int, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
var Cher func(o Order, ul Uplo, n int, alpha float32, x []complex64, incX int, a []complex64, lda int)
var Chpr func(o Order, ul Uplo, n int, alpha float32, x []complex64, incX int, a []complex64)
var Cher2 func(o Order, ul Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, a []complex64, lda int)
var Chpr2 func(o Order, ul Uplo, n int, alpha complex64, x []complex64, incX int, y []complex64, incY int, ap []complex64)
var Zhemv func(o Order, ul Uplo, n int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
var Zhbmv func(o Order, ul Uplo, n int, k int, alpha complex128, a []complex128, lda int, x []complex128, incX int, beta complex128, y []complex128, incY int)
var Zhpmv func(o Order, ul Uplo, n int, alpha complex128, ap []complex128, x []complex128, incX int, beta complex128, y []complex128, incY int)
var Zgeru func(o Order, m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
var Zgerc func(o Order, m int, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
var Zher func(o Order, ul Uplo, n int, alpha float64, x []complex128, incX int, a []complex128, lda int)
var Zhpr func(o Order, ul Uplo, n int, alpha float64, x []complex128, incX int, a []complex128)
var Zher2 func(o Order, ul Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, a []complex128, lda int)
var Zhpr2 func(o Order, ul Uplo, n int, alpha complex128, x []complex128, incX int, y []complex128, incY int, ap []complex128)
